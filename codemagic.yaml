# .codemagic.yaml
workflows:
  android-build:
    name: Android Build - Deep Clean & Forced Gradle Version
    instance_type: mac_mini_m1
    max_build_duration: 60
    environment:
      groups:
        - android
      vars:
        # GRADLE_OPTS: "-Xmx4g -XX:MaxMetaspaceSize=1g" # Entfernen wir vorerst für maximale Isolation
        # ANDROID_SDK_LICENSES: true # Nicht mehr nötig, da wir es manuell akzeptieren

    triggering:
      branch_patterns:
        - pattern: main
          include: true
          
    scripts:
      - name: Environment Setup and Diagnostics # <-- NEU: Kombinierter Setup-Schritt
        script: |
          echo "--- Starting Environment Setup and Diagnostics ---"
          
          # Sicherstellen, dass der Standard-PATH gelöscht wird, um Konflikte zu vermeiden
          # und dann nur notwendige Pfade hinzufügen
          export PATH="" # Leert den PATH komplett
          echo "PATH cleared: $PATH"

          # 1. Java Setup
          export JAVA_HOME=$(/usr/libexec/java_home -v 17)
          export PATH="$JAVA_HOME/bin:$PATH"
          echo "JAVA_HOME set to: $JAVA_HOME"
          java -version
          echo "PATH after Java setup: $PATH"

          # 2. Android SDK Setup
          ANDROID_SDK_TOOLS_VERSION="10406996_latest"
          ANDROID_TOOLS_OS="mac" # Für mac_mini_m1/m2
          
          mkdir -p /tmp/android-sdk/cmdline-tools/latest
          echo "Downloading Android SDK Command Line Tools..."
          curl -L --retry 3 --retry-delay 5 -o commandlinetools.zip https://dl.google.com/android/repository/commandlinetools-${ANDROID_TOOLS_OS}-${ANDROID_SDK_TOOLS_VERSION}.zip
          unzip commandlinetools.zip -d /tmp/android-sdk/cmdline-tools/latest
          mv /tmp/android-sdk/cmdline-tools/latest/cmdline-tools/* /tmp/android-sdk/cmdline-tools/latest/
          
          export ANDROID_HOME=/tmp/android-sdk
          # Wichtig: Android SDK Tools zuerst im PATH, um sdkmanager zu finden
          export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/34.0.0:$PATH"
          echo "ANDROID_HOME set to: $ANDROID_HOME"
          echo "PATH after Android SDK setup: $PATH"
          
          echo "Accepting Android SDK licenses..."
          yes | sdkmanager --sdk_root=$ANDROID_HOME --licenses
          echo "Installing required Android SDK components..."
          sdkmanager --sdk_root=$ANDROID_HOME "build-tools;34.0.0" "platforms;android-34" "cmake;3.22.1"
          echo "Android SDK Tools installed and licensed."

          # 3. Global Gradle Installation (8.7)
          GRADLE_VERSION="8.7"
          GRADLE_ZIP="gradle-$GRADLE_VERSION-bin.zip"
          GRADLE_URL="https://services.gradle.org/distributions/$GRADLE_ZIP"
          
          echo "Downloading and installing Gradle $GRADLE_VERSION from: $GRADLE_URL"
          curl -L --retry 3 --retry-delay 5 -o "$GRADLE_ZIP" "$GRADLE_URL"
          
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to download Gradle $GRADLE_VERSION from $GRADLE_URL. Curl exit code: $?"
            exit 1
          fi

          unzip -o "$GRADLE_ZIP" -d /tmp
          export GRADLE_HOME="/tmp/gradle-$GRADLE_VERSION"
          # Wichtig: Unser globales Gradle ganz vorne im PATH
          export PATH="$GRADLE_HOME/bin:$PATH"
          
          echo "PATH after global Gradle setup: $PATH"
          gradle --version # Sollte jetzt 8.7 sein
          echo "Gradle $GRADLE_VERSION installed globally."

          # Jetzt alle Exports in $CM_ENV schreiben
          echo "JAVA_HOME=$JAVA_HOME" >> $CM_ENV
          echo "ANDROID_HOME=$ANDROID_HOME" >> $CM_ENV
          echo "GRADLE_HOME=$GRADLE_HOME" >> $CM_ENV
          echo "PATH=$PATH" >> $CM_ENV # Exportiert den finalen PATH
          echo "--- Environment Setup Complete ---"

      - name: Prepare and Generate Gradle Wrapper # <-- NEU: Fokus auf sauberen Wrapper
        script: |
          echo "--- Preparing and Generating Gradle Wrapper ---"
          
          # Sehr aggressive Reinigung des Gradle Wrapper Caches und der Dists
          echo "Aggressively cleaning Gradle Wrapper caches and distributions..."
          rm -rf ~/.gradle/caches/modules-2/files-2.1/com.android.tools.build/gradle/ # Löscht spezifischen AGP Cache
          rm -rf ~/.gradle/wrapper/dists/* # Globaler Wrapper Dists Cache
          rm -rf gradle/wrapper/dists/* # Lokaler Wrapper Dists Cache (im Projekt)
          rm -f gradle/wrapper/gradle-wrapper.jar # Löscht die Wrapper JAR im Projekt

          # Sicherstellen, dass gradlew ausführbar ist
          chmod +x gradlew
          echo "gradlew is now executable."

          # Überprüfe die gradle-wrapper.properties
          if [ ! -f "gradle/wrapper/gradle-wrapper.properties" ]; then
            echo "ERROR: gradle/wrapper/gradle-wrapper.properties not found! This file must exist in your repository."
            exit 1
          fi

          # Stelle sicher, dass die properties-Datei die korrekte URL hat
          # Ich nehme an, dass die Datei im Repo schon auf 8.7 steht, da wir es im letzten Build gesehen haben
          # Wenn nicht, könnte man hier eine Sed-Operation einfügen
          # Beispiel: sed -i '' 's|distributionUrl=.*|distributionUrl=https\\://services.gradle.org/distributions/gradle-8.7-all.zip|g' gradle/wrapper/gradle-wrapper.properties

          echo "Generating Gradle wrapper with version 8.7..."
          # Generiere den Wrapper, um sicherzustellen, dass die JAR korrekt ist
          # Nutze den explizit installierten 'gradle'-Befehl
          gradle wrapper --gradle-version 8.7 --distribution-type all
          
          echo "Contents of gradle/wrapper/:"
          ls -l gradle/wrapper/
          echo "Contents of gradle/wrapper/gradle-wrapper.properties:"
          cat gradle/wrapper/gradle-wrapper.properties
          echo "Contents of gradlew:"
          ls -l gradlew
          
          echo "Verifying ./gradlew --version output (should be 8.7):"
          ./gradlew --version # Hier muss jetzt 8.7 stehen
          echo "--- Gradle Wrapper Setup Complete ---"

      - name: Clean Project
        script: |
          echo "--- Cleaning Project ---"
          ./gradlew clean --stacktrace --info --no-daemon
          if [ $? -ne 0 ]; then echo "Clean task failed. See logs above." && exit 1; fi
          echo "Project cleaned successfully."
      
      - name: Build KSP Debug
        script: |
          echo "--- Running KSP Debug ---"
          mkdir -p app/schemas
          chmod -R u+w app/schemas
          ./gradlew :app:kspDebugKotlin --stacktrace --info --no-daemon
          if [ $? -ne 0 ]; then echo "KSP Debug task failed. See logs above." && exit 1; fi
          echo "KSP Debug completed. Verifying schema files."
          ls -l app/schemas/ || echo "No schema files found in app/schemas"
          find app/build/generated/ksp/debug/ -type f || echo "No KSP generated files found"


      - name: Build Android Debug APK
        script: |
          echo "--- Building Android Debug APK ---"
          ./gradlew assembleDebug --stacktrace --info --no-daemon
          if [ $? -ne 0 ]; then echo "Assemble Debug task failed. See logs above." && exit 1; fi
          echo "Debug APK build complete."
          
    artifacts:
      - app/build/outputs/apk/debug/app-debug.apk
      - app/build/outputs/bundle/debug/app-debug.aab
      - app/build/generated/ksp/**/*
      - app/schemas/*.json
      
    publishing:
      email:
        recipients:
          - deine.email@example.com
