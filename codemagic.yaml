# .codemagic.yaml - gemini
workflows:
  android-build:
    name: Android Build with KSP & Gradle Wrapper Generation
    instance_type: mac_mini_m1 # Oder ein anderer Build-Host, z.B. mac_pro_xcode_14
    environment:
      android_sdk_licenses: true
      java_tool_options: -Xmx4096m
      vars:
        # Hier könnten weitere Umgebungsvariablen definiert werden
        # z.B. für API-Schlüssel, die nicht im Code sind
        # MY_API_KEY: $MY_API_KEY_SECRET # Geheimnis, das in Codemagic UI definiert wird
    triggering:
      branch_patterns:
        - pattern: main
          include: true
    scripts:
      - name: Make gradlew executable
        script: |
          # Stellt sicher, dass das gradlew-Skript ausführbar ist
          chmod +x gradlew
          echo "gradlew is now executable."
      - name: Regenerate Gradle Wrapper
        script: |
          # Löscht vorhandenen Wrapper (falls doch versehentlich im Repo) und generiert ihn neu
          rm -f gradle/wrapper/gradle-wrapper.jar
          # Erzwingt die Generierung des Wrappers für die definierte Gradle Version (8.4)
          ./gradlew wrapper --gradle-version 8.4 --distribution-type all
          echo "Gradle Wrapper regenerated successfully."
      - name: Set Android SDK path
        script: |
          echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $CM_ENV
          echo "PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools" >> $CM_ENV
      - name: Clean Project
        script: |
          ./gradlew clean
      - name: Build Android Release APK
        script: |
          ./gradlew assembleRelease
    artifacts:
      - app/build/outputs/**/*.apk
      - app/build/outputs/**/*.aab
    publishing:
      email:
        recipients:
          - deine.email@example.com # Deine E-Mail-Adresse für Build-Benachrichtigungen
        success: true
        failure: true
